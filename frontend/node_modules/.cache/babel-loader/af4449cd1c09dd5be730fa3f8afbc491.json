{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Srishti\\\\Desktop\\\\stuff\\\\college\\\\4th year\\\\EComm\\\\1\\\\FullStack_Ecommerce_App\\\\frontend\\\\src\\\\pages\\\\CardUpdatePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { savedCardsList, updateStripeCard } from '../actions/cardActions';\nimport { Row, Col, Form, Button, Card } from 'react-bootstrap';\nimport { Spinner } from 'react-bootstrap';\nimport { UPDATE_STRIPE_CARD_RESET } from '../constants';\nimport { checkTokenValidation, logout } from '../actions/userActions';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardUpdatePage = () => {\n  _s();\n\n  let history = useHistory(); // check token validation reducer\n\n  const checkTokenValidationReducer = useSelector(state => state.checkTokenValidationReducer);\n  const {\n    error: tokenError\n  } = checkTokenValidationReducer;\n  const dispatch = useDispatch();\n  const [cardNumber, setCardNumber] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [expMonth, setExpMonth] = useState(\"\");\n  const [expYear, setExpYear] = useState(\"\");\n  const [addressCity, setAddressCity] = useState(\"\");\n  const [addressCountry, setAddressCountry] = useState(\"\");\n  const [addressState, setAddressState] = useState(\"\");\n  const [addressZip, setAddressZip] = useState(\"\");\n  const [customerId, setCustomerId] = useState(\"\");\n  const [cardId, setCardId] = useState(\"\"); // login reducer\n\n  const userLoginReducer = useSelector(state => state.userLoginReducer);\n  const {\n    userInfo\n  } = userLoginReducer; // saved cards list reducer\n\n  const savedCardsListReducer = useSelector(state => state.savedCardsListReducer);\n  const {\n    stripeCards,\n    loading\n  } = savedCardsListReducer; // update card reducer\n\n  const updateStripeCardtReducer = useSelector(state => state.updateStripeCardtReducer);\n  const {\n    success\n  } = updateStripeCardtReducer;\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else {\n      dispatch(checkTokenValidation());\n      dispatch(savedCardsList());\n    }\n  }, [dispatch, history, userInfo, success]);\n\n  if (userInfo && tokenError === \"Request failed with status code 401\") {\n    alert(\"Session expired, please login again.\");\n    dispatch(logout());\n    history.push(\"/login\");\n    window.location.reload();\n  }\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (customerId && cardId) {\n      const all_card_data = {\n        card_number: cardNumber,\n        customer_id: customerId,\n        card_id: cardId,\n        exp_month: expMonth,\n        exp_year: expYear,\n        name_on_card: name,\n        address_city: addressCity,\n        address_country: addressCountry,\n        address_state: addressState,\n        address_zip: addressZip\n      }; // action\n\n      dispatch(updateStripeCard(all_card_data));\n    }\n  };\n\n  const setCustomerAndCardIds = (cus_Id, card_Id, c_num) => {\n    setCustomerId(cus_Id);\n    setCardId(card_Id);\n    setCardNumber(c_num);\n  };\n\n  if (success) {\n    alert(\"Card Successfully Updated\");\n    history.push(\"/stripe-card-details\");\n    dispatch({\n      type: UPDATE_STRIPE_CARD_RESET\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-md-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"d-flex justify-content-center\",\n          style: {\n            display: \"flex\",\n            marginBottom: \"15px\",\n            color: \"#008080\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"Update Card Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 33\n        }, this), stripeCards.map((each, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"p-4 mb-4\",\n            style: {\n              border: \"1px solid\",\n              borderColor: \"#C6ACE7\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              onSubmit: onSubmit,\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"name\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Name on Card\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  autoFocus: true,\n                  type: \"text\",\n                  defaultValue: each.name_on_card,\n                  placeholder: \"full name\",\n                  onChange: e => setName(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"month\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Exp Month\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  pattern: \"[0-9]+\",\n                  maxLength: \"2\",\n                  defaultValue: each.exp_month,\n                  placeholder: \"exp month\",\n                  onChange: e => setExpMonth(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"year\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Exp Year\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  pattern: \"[0-9]+\",\n                  defaultValue: each.exp_year,\n                  placeholder: \"exp year\",\n                  maxLength: \"4\",\n                  onChange: e => setExpYear(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"city\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Address City\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  defaultValue: each.address_city,\n                  placeholder: \"address city\",\n                  onChange: e => setAddressCity(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"country\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Address Country\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  defaultValue: each.address_country,\n                  placeholder: \"address country\",\n                  onChange: e => setAddressCountry(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"state\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Address State\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  defaultValue: each.address_state,\n                  placeholder: \"address state\",\n                  onChange: e => setAddressState(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"zip\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Address Zip\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  defaultValue: each.address_zip,\n                  placeholder: \"address zip\",\n                  pattern: \"[0-9]+\",\n                  maxLength: \"6\",\n                  onChange: e => setAddressZip(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"success\",\n                onClick: () => setCustomerAndCardIds(each.customer_id, each.card_id, each.card_number),\n                style: {\n                  width: \"100%\"\n                },\n                className: \"btn-sm button-focus-css\",\n                children: \"Save Changes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"primary\",\n                onClick: () => history.push(\"/stripe-card-details/\"),\n                style: {\n                  width: \"100%\"\n                },\n                className: \"btn-sm mt-2 button-focus-css\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardUpdatePage, \"PU633NLq41PwDCpmZl/Ruzl8/JY=\", false, function () {\n  return [useHistory, useSelector, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = CardUpdatePage;\nexport default CardUpdatePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardUpdatePage\");","map":{"version":3,"sources":["C:/Users/Srishti/Desktop/stuff/college/4th year/EComm/1/FullStack_Ecommerce_App/frontend/src/pages/CardUpdatePage.js"],"names":["React","useState","useEffect","useDispatch","useSelector","savedCardsList","updateStripeCard","Row","Col","Form","Button","Card","Spinner","UPDATE_STRIPE_CARD_RESET","checkTokenValidation","logout","useHistory","CardUpdatePage","history","checkTokenValidationReducer","state","error","tokenError","dispatch","cardNumber","setCardNumber","name","setName","expMonth","setExpMonth","expYear","setExpYear","addressCity","setAddressCity","addressCountry","setAddressCountry","addressState","setAddressState","addressZip","setAddressZip","customerId","setCustomerId","cardId","setCardId","userLoginReducer","userInfo","savedCardsListReducer","stripeCards","loading","updateStripeCardtReducer","success","push","alert","window","location","reload","onSubmit","e","preventDefault","all_card_data","card_number","customer_id","card_id","exp_month","exp_year","name_on_card","address_city","address_country","address_state","address_zip","setCustomerAndCardIds","cus_Id","card_Id","c_num","type","display","marginBottom","color","map","each","idx","border","borderColor","target","value","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savedCardsList, updateStripeCard } from '../actions/cardActions'\r\nimport { Row, Col, Form, Button, Card } from 'react-bootstrap'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { UPDATE_STRIPE_CARD_RESET } from '../constants'\r\nimport { checkTokenValidation, logout } from '../actions/userActions'\r\nimport { useHistory } from 'react-router-dom'   \r\n\r\n\r\nconst CardUpdatePage = () => {\r\n\r\n    let history = useHistory()\r\n\r\n    // check token validation reducer\r\n    const checkTokenValidationReducer = useSelector(state => state.checkTokenValidationReducer)\r\n    const { error: tokenError } = checkTokenValidationReducer\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const [cardNumber, setCardNumber] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n    const [expMonth, setExpMonth] = useState(\"\")\r\n    const [expYear, setExpYear] = useState(\"\")\r\n    const [addressCity, setAddressCity] = useState(\"\")\r\n    const [addressCountry, setAddressCountry] = useState(\"\")\r\n    const [addressState, setAddressState] = useState(\"\")\r\n    const [addressZip, setAddressZip] = useState(\"\")\r\n    const [customerId, setCustomerId] = useState(\"\")\r\n    const [cardId, setCardId] = useState(\"\")\r\n\r\n\r\n    // login reducer\r\n    const userLoginReducer = useSelector(state => state.userLoginReducer)\r\n    const { userInfo } = userLoginReducer\r\n\r\n    // saved cards list reducer\r\n    const savedCardsListReducer = useSelector(state => state.savedCardsListReducer)\r\n    const { stripeCards, loading } = savedCardsListReducer\r\n\r\n    // update card reducer\r\n    const updateStripeCardtReducer = useSelector(state => state.updateStripeCardtReducer)\r\n    const { success } = updateStripeCardtReducer\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push(\"/login\")\r\n        } else {\r\n            dispatch(checkTokenValidation())\r\n            dispatch(savedCardsList())\r\n        }\r\n    }, [dispatch, history, userInfo, success])\r\n\r\n    if (userInfo && tokenError === \"Request failed with status code 401\") {\r\n        alert(\"Session expired, please login again.\")\r\n        dispatch(logout())\r\n        history.push(\"/login\")\r\n        window.location.reload()\r\n    }\r\n\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (customerId && cardId) {\r\n            const all_card_data = {\r\n                card_number: cardNumber,\r\n                customer_id: customerId,\r\n                card_id: cardId,\r\n                exp_month: expMonth,\r\n                exp_year: expYear,\r\n                name_on_card: name,\r\n                address_city: addressCity,\r\n                address_country: addressCountry,\r\n                address_state: addressState,\r\n                address_zip: addressZip\r\n            }\r\n            // action\r\n            dispatch(updateStripeCard(all_card_data))\r\n        }\r\n    }\r\n\r\n    const setCustomerAndCardIds = (cus_Id, card_Id, c_num) => {\r\n        setCustomerId(cus_Id)\r\n        setCardId(card_Id)\r\n        setCardNumber(c_num)\r\n    }\r\n\r\n    if (success) {\r\n        alert(\"Card Successfully Updated\")\r\n        history.push(\"/stripe-card-details\")\r\n        dispatch({\r\n            type: UPDATE_STRIPE_CARD_RESET\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className='justify-content-md-center'>\r\n                <Col xs={12} md={6}>\r\n                    <span\r\n                        className=\"d-flex justify-content-center\"\r\n                        style={{ display: \"flex\", marginBottom: \"15px\", color: \"#008080\" }}>\r\n                        <em>Update Card Details</em>\r\n                    </span>\r\n                    {loading && <Spinner animation=\"border\" />}\r\n                    {stripeCards.map((each, idx) => (\r\n                        <div key={idx}>\r\n                            <Card\r\n                                className=\"p-4 mb-4\"\r\n                                style={{ border: \"1px solid\", borderColor: \"#C6ACE7\" }}\r\n                            >\r\n                                <Form onSubmit={onSubmit}>\r\n\r\n                                    <Form.Group controlId='name'>\r\n                                        <Form.Label>\r\n                                            Name on Card\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            autoFocus={true}\r\n                                            type=\"text\"\r\n                                            defaultValue={each.name_on_card}\r\n                                            placeholder=\"full name\"\r\n                                            onChange={(e) => setName(e.target.value)}\r\n                                        >\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='month'>\r\n                                        <Form.Label>\r\n                                            Exp Month\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            pattern=\"[0-9]+\"\r\n                                            maxLength=\"2\"\r\n                                            defaultValue={each.exp_month}\r\n                                            placeholder=\"exp month\"\r\n                                            onChange={(e) => setExpMonth(e.target.value)}\r\n                                        >\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='year'>\r\n                                        <Form.Label>\r\n                                            Exp Year\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            pattern=\"[0-9]+\"\r\n                                            defaultValue={each.exp_year}\r\n                                            placeholder=\"exp year\"\r\n                                            maxLength=\"4\"\r\n                                            onChange={(e) => setExpYear(e.target.value)}\r\n                                        >\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='city'>\r\n                                        <Form.Label>\r\n                                            Address City\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            defaultValue={each.address_city}\r\n                                            placeholder=\"address city\"\r\n                                            onChange={(e) => setAddressCity(e.target.value)}\r\n                                        >\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='country'>\r\n                                        <Form.Label>\r\n                                            Address Country\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            defaultValue={each.address_country}\r\n                                            placeholder=\"address country\"\r\n                                            onChange={(e) => setAddressCountry(e.target.value)}\r\n                                        >\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='state'>\r\n                                        <Form.Label>\r\n                                            Address State\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            defaultValue={each.address_state}\r\n                                            placeholder=\"address state\"\r\n                                            onChange={(e) => setAddressState(e.target.value)}\r\n                                        >\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='zip'>\r\n                                        <Form.Label>\r\n                                            Address Zip\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            defaultValue={each.address_zip}\r\n                                            placeholder=\"address zip\"\r\n                                            pattern=\"[0-9]+\"\r\n                                            maxLength=\"6\"\r\n                                            onChange={(e) => setAddressZip(e.target.value)}\r\n                                        >\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant='success'\r\n                                        onClick={() => setCustomerAndCardIds(each.customer_id, each.card_id, each.card_number)}\r\n                                        style={{ width: \"100%\" }}\r\n                                        className=\"btn-sm button-focus-css\">\r\n                                        Save Changes\r\n                                    </Button>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant='primary'\r\n                                        onClick={() => history.push(\"/stripe-card-details/\")}\r\n                                        style={{ width: \"100%\" }}\r\n                                        className=\"btn-sm mt-2 button-focus-css\">\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Form>\r\n                            </Card>\r\n                        </div>\r\n                    ))}\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardUpdatePage\r\n"]},"metadata":{},"sourceType":"module"}