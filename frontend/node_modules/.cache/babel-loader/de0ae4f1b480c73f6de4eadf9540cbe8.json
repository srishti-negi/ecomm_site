{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Srishti\\\\Desktop\\\\stuff\\\\college\\\\4th year\\\\EComm\\\\1\\\\ecomm_site\\\\frontend\\\\src\\\\pages\\\\OrdersListPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { checkTokenValidation, getAllOrders, logout } from '../actions/userActions';\nimport { useHistory } from 'react-router-dom';\nimport { Table, Spinner } from 'react-bootstrap';\nimport { dateCheck } from '../components/GetDate';\nimport { changeDeliveryStatus } from '../actions/productActions';\nimport { CHANGE_DELIVERY_STATUS_RESET, SAVED_CARDS_LIST_SUCCESS } from '../constants';\nimport SearchBarForOrdersPage from '../components/SearchBarForOrdersPage';\nimport Message from '../components/Message';\nimport { cartList } from './ProductDetailsPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet total_amount = 0;\n\nfunction OrdersListPage() {\n  _s();\n\n  cartList.forEach(element => {\n    console.log(element);\n    if (element[2] != \"Price\") total_amount += element[2];\n  });\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const placeholderValue = \"Search orders by book name\";\n  const todays_date = dateCheck(new Date().toISOString().slice(0, 10));\n  const [currentDateInfo] = useState(todays_date);\n  const [idOfchangeDeliveryStatus, setIdOfchangeDeliveryStatus] = useState(0);\n  const [cloneSearchTerm, setCloneSearchTerm] = useState(\"\"); // login reducer\n\n  const userLoginReducer = useSelector(state => state.userLoginReducer);\n  const {\n    userInfo\n  } = userLoginReducer; // get all orders reducer\n\n  const getAllOrdersReducer = useSelector(state => state.getAllOrdersReducer);\n  const {\n    orders,\n    loading: loadingOrders\n  } = getAllOrdersReducer; // change delivery status reducer\n\n  const changeDeliveryStatusReducer = useSelector(state => state.changeDeliveryStatusReducer);\n  const {\n    success: deliveryStatusChangeSuccess,\n    loading: deliveryStatusChangeSpinner\n  } = changeDeliveryStatusReducer; // check token validation reducer\n\n  const checkTokenValidationReducer = useSelector(state => state.checkTokenValidationReducer);\n  const {\n    error: tokenError\n  } = checkTokenValidationReducer;\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else {\n      dispatch(checkTokenValidation());\n      dispatch(getAllOrders());\n    }\n  }, [userInfo, dispatch, history]);\n\n  if (userInfo && tokenError === \"Request failed with status code 401\") {\n    alert(\"Session expired, please login again.\");\n    dispatch(logout());\n    history.push(\"/login\");\n    window.location.reload();\n  }\n\n  const changeDeliveryStatusHandler = (id, status) => {\n    setIdOfchangeDeliveryStatus(id);\n    const productData = {\n      \"is_delivered\": status,\n      \"delivered_at\": status ? currentDateInfo : \"Not Delivered\"\n    };\n    dispatch(changeDeliveryStatus(id, productData));\n  };\n\n  if (deliveryStatusChangeSuccess) {\n    alert(\"Delivery status changed successfully\");\n    dispatch({\n      type: CHANGE_DELIVERY_STATUS_RESET\n    });\n    dispatch(getAllOrders());\n  }\n\n  const handleSearchTerm = term => {\n    setCloneSearchTerm(term);\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //     {loadingOrders && <span style={{ display: \"flex\" }}>\n    //         <h5>Getting Orders</h5>\n    //         <span className=\"ml-2\">\n    //             <Spinner animation=\"border\" />\n    //         </span>\n    //     </span>}\n    //     {userInfo.admin && <SearchBarForOrdersPage handleSearchTerm={handleSearchTerm} placeholderValue={placeholderValue} />}\n    //         {orders.length > 0 ?\n    //         <Table className=\"mt-2\" striped bordered>\n    //             <thead>\n    //                 <tr className=\"p-3 bg-info text-white text-center\">\n    //                     <th>Order Id</th>\n    //                     <th>Image</th>\n    //                     <th>Ordered Item</th>\n    //                     <th>Total Amount</th>\n    //                     {userInfo.admin &&\n    //                         <th>Remove from cart</th>\n    //                     }\n    //                 </tr>\n    //             </thead>\n    //             {orders.filter((item) => (\n    //                 item.name.toLowerCase().includes(cloneSearchTerm)\n    //                 ||\n    //                 item.ordered_item.toLowerCase().includes(cloneSearchTerm)\n    //                 ||\n    //                 item.address.toLowerCase().includes(cloneSearchTerm)\n    //             )\n    //             ).map((order, idx) => (\n    //                 <tbody key={idx}>\n    //                     <tr className=\"text-center\">\n    //                         <td>\n    //                             {order.id}\n    //                         </td>\n    //                         <td>\n    //                         <img src = {order.image} className=\"order\"></img></td>\n    //                         <td>{order.name}</td>\n    //                         <td>{order.total_price}</td>\n    //                         {userInfo.admin &&\n    //                             <td>\n    //                                 {order.is_delivered ?\n    //                                     <button\n    //                                         className=\"btn btn-outline-danger btn-sm\"\n    //                                         onClick={() => changeDeliveryStatusHandler(order.id, false)}\n    //                                     >\n    //                                         {deliveryStatusChangeSpinner\n    //                                             &&\n    //                                             idOfchangeDeliveryStatus === order.id\n    //                                             ?\n    //                                             <Spinner animation=\"border\" />\n    //                                             :\n    //                                             \"Mark as Undelivered\"}\n    //                                     </button>\n    //                                     :\n    //                                     <button\n    //                                         className=\"btn btn-outline-primary btn-sm\"\n    //                                         onClick={() => changeDeliveryStatusHandler(order.id, true)}\n    //                                     >\n    //                                         {deliveryStatusChangeSpinner\n    //                                             &&\n    //                                             idOfchangeDeliveryStatus === order.id\n    //                                             ?\n    //                                             <Spinner animation=\"border\" />\n    //                                             :\n    //                                             \"Mark as delivered\"}\n    //                                     </button>\n    //                                 }\n    //                             </td>\n    //                         }\n    //                         <td>\n    //                             <button className=\"removeFromCart\">Remove From Cart</button>\n    //                         </td>\n    //                     </tr>\n    //                 </tbody>\n    //             ))}\n    //         </Table>\n    //         : <Message variant=\"info\">No orders yet.</Message> }\n    //         <button className=\"removeFromCart\">Total Amount: 7200.98</button>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"mt-2\",\n        striped: true,\n        bordered: true,\n        id: \"cartTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"p-3 bg-info text-white text-center\",\n            children: cartList[0].map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: cartList.slice(1, cartList.length).map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: item[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item[2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: item[3],\n                  className: \"order\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 24\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"removeFromCart\",\n        children: [\"Total Amount: \", total_amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(OrdersListPage, \"s3e3rkUcOHwqCplXMgCok6MloDw=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = OrdersListPage;\nexport default OrdersListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdersListPage\");","map":{"version":3,"sources":["C:/Users/Srishti/Desktop/stuff/college/4th year/EComm/1/ecomm_site/frontend/src/pages/OrdersListPage.js"],"names":["React","useEffect","useState","useDispatch","useSelector","checkTokenValidation","getAllOrders","logout","useHistory","Table","Spinner","dateCheck","changeDeliveryStatus","CHANGE_DELIVERY_STATUS_RESET","SAVED_CARDS_LIST_SUCCESS","SearchBarForOrdersPage","Message","cartList","total_amount","OrdersListPage","forEach","element","console","log","history","dispatch","placeholderValue","todays_date","Date","toISOString","slice","currentDateInfo","idOfchangeDeliveryStatus","setIdOfchangeDeliveryStatus","cloneSearchTerm","setCloneSearchTerm","userLoginReducer","state","userInfo","getAllOrdersReducer","orders","loading","loadingOrders","changeDeliveryStatusReducer","success","deliveryStatusChangeSuccess","deliveryStatusChangeSpinner","checkTokenValidationReducer","error","tokenError","push","alert","window","location","reload","changeDeliveryStatusHandler","id","status","productData","type","handleSearchTerm","term","map","item","index","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { checkTokenValidation, getAllOrders, logout } from '../actions/userActions'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Table, Spinner } from 'react-bootstrap'\r\nimport { dateCheck } from '../components/GetDate'\r\nimport { changeDeliveryStatus } from '../actions/productActions'\r\nimport { CHANGE_DELIVERY_STATUS_RESET, SAVED_CARDS_LIST_SUCCESS } from '../constants'\r\nimport SearchBarForOrdersPage from '../components/SearchBarForOrdersPage'\r\nimport Message from '../components/Message'\r\nimport {cartList} from './ProductDetailsPage'\r\n\r\nlet total_amount = 0\r\n\r\nfunction OrdersListPage() {\r\n\r\n    cartList.forEach(element => {\r\n        console.log(element)\r\n        if(element[2] != \"Price\")\r\n        total_amount += element[2]\r\n    });\r\n\r\n    let history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const placeholderValue = \"Search orders by book name\"\r\n\r\n    const todays_date = dateCheck(new Date().toISOString().slice(0, 10))\r\n\r\n    const [currentDateInfo] = useState(todays_date)\r\n    const [idOfchangeDeliveryStatus, setIdOfchangeDeliveryStatus] = useState(0)\r\n    const [cloneSearchTerm, setCloneSearchTerm] = useState(\"\")\r\n\r\n    // login reducer\r\n    const userLoginReducer = useSelector(state => state.userLoginReducer)\r\n    const { userInfo } = userLoginReducer\r\n\r\n    // get all orders reducer\r\n    const getAllOrdersReducer = useSelector(state => state.getAllOrdersReducer)\r\n    const { orders, loading: loadingOrders } = getAllOrdersReducer\r\n\r\n    // change delivery status reducer\r\n    const changeDeliveryStatusReducer = useSelector(state => state.changeDeliveryStatusReducer)\r\n    const { success: deliveryStatusChangeSuccess, loading: deliveryStatusChangeSpinner } = changeDeliveryStatusReducer\r\n\r\n    // check token validation reducer\r\n    const checkTokenValidationReducer = useSelector(state => state.checkTokenValidationReducer)\r\n    const { error: tokenError } = checkTokenValidationReducer\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push(\"/login\")\r\n        } else {\r\n            dispatch(checkTokenValidation())\r\n            dispatch(getAllOrders())\r\n        }\r\n    }, [userInfo, dispatch, history])\r\n\r\n    if (userInfo && tokenError === \"Request failed with status code 401\") {\r\n        alert(\"Session expired, please login again.\")\r\n        dispatch(logout())\r\n        history.push(\"/login\")\r\n        window.location.reload()\r\n    }\r\n\r\n    const changeDeliveryStatusHandler = (id, status) => {\r\n        setIdOfchangeDeliveryStatus(id)\r\n        const productData = {\r\n            \"is_delivered\": status,\r\n            \"delivered_at\": status ? currentDateInfo : \"Not Delivered\"\r\n        }\r\n        dispatch(changeDeliveryStatus(id, productData))\r\n    }\r\n\r\n    if (deliveryStatusChangeSuccess) {\r\n        alert(\"Delivery status changed successfully\")\r\n        dispatch({\r\n            type: CHANGE_DELIVERY_STATUS_RESET\r\n        })\r\n        dispatch(getAllOrders())\r\n    }\r\n\r\n    const handleSearchTerm = (term) => {\r\n        setCloneSearchTerm(term)\r\n    };\r\n\r\n\r\n    return (\r\n        // <div>\r\n        //     {loadingOrders && <span style={{ display: \"flex\" }}>\r\n        //         <h5>Getting Orders</h5>\r\n        //         <span className=\"ml-2\">\r\n        //             <Spinner animation=\"border\" />\r\n        //         </span>\r\n        //     </span>}\r\n        //     {userInfo.admin && <SearchBarForOrdersPage handleSearchTerm={handleSearchTerm} placeholderValue={placeholderValue} />}\r\n        //         {orders.length > 0 ?\r\n        //         <Table className=\"mt-2\" striped bordered>\r\n        //             <thead>\r\n        //                 <tr className=\"p-3 bg-info text-white text-center\">\r\n        //                     <th>Order Id</th>\r\n        //                     <th>Image</th>\r\n        //                     <th>Ordered Item</th>\r\n        //                     <th>Total Amount</th>\r\n        //                     {userInfo.admin &&\r\n        //                         <th>Remove from cart</th>\r\n        //                     }\r\n        //                 </tr>\r\n        //             </thead>\r\n\r\n\r\n        //             {orders.filter((item) => (\r\n\r\n        //                 item.name.toLowerCase().includes(cloneSearchTerm)\r\n        //                 ||\r\n        //                 item.ordered_item.toLowerCase().includes(cloneSearchTerm)\r\n        //                 ||\r\n        //                 item.address.toLowerCase().includes(cloneSearchTerm)\r\n        //             )\r\n\r\n        //             ).map((order, idx) => (\r\n        //                 <tbody key={idx}>\r\n        //                     <tr className=\"text-center\">\r\n        //                         <td>\r\n        //                             {order.id}\r\n        //                         </td>\r\n        //                         <td>\r\n        //                         <img src = {order.image} className=\"order\"></img></td>\r\n        //                         <td>{order.name}</td>\r\n        //                         <td>{order.total_price}</td>\r\n        //                         {userInfo.admin &&\r\n        //                             <td>\r\n        //                                 {order.is_delivered ?\r\n        //                                     <button\r\n        //                                         className=\"btn btn-outline-danger btn-sm\"\r\n        //                                         onClick={() => changeDeliveryStatusHandler(order.id, false)}\r\n        //                                     >\r\n        //                                         {deliveryStatusChangeSpinner\r\n        //                                             &&\r\n        //                                             idOfchangeDeliveryStatus === order.id\r\n        //                                             ?\r\n        //                                             <Spinner animation=\"border\" />\r\n        //                                             :\r\n        //                                             \"Mark as Undelivered\"}\r\n        //                                     </button>\r\n        //                                     :\r\n        //                                     <button\r\n        //                                         className=\"btn btn-outline-primary btn-sm\"\r\n        //                                         onClick={() => changeDeliveryStatusHandler(order.id, true)}\r\n        //                                     >\r\n        //                                         {deliveryStatusChangeSpinner\r\n        //                                             &&\r\n        //                                             idOfchangeDeliveryStatus === order.id\r\n        //                                             ?\r\n        //                                             <Spinner animation=\"border\" />\r\n        //                                             :\r\n        //                                             \"Mark as delivered\"}\r\n        //                                     </button>\r\n        //                                 }\r\n        //                             </td>\r\n        //                         }\r\n        //                         <td>\r\n        //                             <button className=\"removeFromCart\">Remove From Cart</button>\r\n        //                         </td>\r\n        //                     </tr>\r\n\r\n        //                 </tbody>\r\n        //             ))}\r\n        //         </Table>\r\n        //         : <Message variant=\"info\">No orders yet.</Message> }\r\n        //         <button className=\"removeFromCart\">Total Amount: 7200.98</button>\r\n        // </div>\r\n        <div>\r\n        <table className=\"mt-2\" striped bordered id='cartTable'>\r\n          <thead>\r\n            <tr className=\"p-3 bg-info text-white text-center\">\r\n              {cartList[0].map((item, index) => {\r\n                return <th>{item}</th>;\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {cartList.slice(1, cartList.length).map((item, index) => {\r\n              return (\r\n                <tr className=\"text-center\">\r\n                  <td>{item[0]}</td>\r\n                  <td>{item[1]}</td>\r\n                  <td>{item[2]}</td>\r\n                  <td> <img src = {item[3]} className=\"order\" ></img></td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <button className=\"removeFromCart\">Total Amount: {total_amount}</button>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default OrdersListPage"]},"metadata":{},"sourceType":"module"}